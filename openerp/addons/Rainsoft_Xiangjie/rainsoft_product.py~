#-*- coding:utf-8 -*-
import logging
from openerp.tools.translate import _
from openerp.osv import fields,osv,orm


_logger = logging.getLogger(__name__)


class rainsoft_product(osv.osv):
	_name="product.product"
	_inherit="product.product"
	_description="add constraints"
	_sql_constraints=[
			('rainsoft_product_default_code','unique(default_code)','default_code must be unique'),
			('rainsoft_product_name','unique(name_template)','there is one product which has the same name.'),
			]

	def copy(self,cr,uid,id,default=None,context=None):
		if context is None:
			context={}
		if not default:
			default={}

		context_wo_lang=context.copy()
		context_wo_lang.pop('lang',None)
		product=self.read(cr,uid,id,['name'],context=context_wo_lang)
		default = default.copy()
		default.update(name=_("%s (copy)") % (product['name']))
       
		if context.get('variant',False):
			fiedls=['product_tmpl_id','active','variants','price_marign','price_extral']
			data=self.read(cr,uid,id,fields=fields,context=context)
			for f in fields:
				if f in default:
					data[f]=default[f]
			data['product_tmpl_id']=data.get('product_tmpl_id',False)\
					and data['product_tmpl_id'][0]
			del data['id']
			return self.create(cr,uid,data)
		else:
			print product.keys()
			default.update(default_code='0')
			result = super(rainsoft_product,self).copy(cr,uid,id,default=default,context=context)
			return result

rainsoft_product()
